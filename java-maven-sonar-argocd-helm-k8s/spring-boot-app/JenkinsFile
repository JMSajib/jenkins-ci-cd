pipeline {
  agent any

  stages {
    // stage('Clean Workspace') {
    //   steps {
    //     deleteDir()
    //   }
    // }

    stage('Checkout') {
      steps {
        sh 'echo passed'
        // Uncomment the below line to use your actual Git repo
        // git branch: 'main', url: 'https://github.com/your_git'
      }
    }

    stage('Build and Test') {
      steps {
        sh '''
          set -e
          ls -ltr
          cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
          mvn clean package -Dmaven.clean.failOnError=false
        '''
      }
    }

    // Uncomment and configure SonarQube when ready
    // stage('Static Code Analysis') {
    //   environment {
    //     SONAR_URL = credentials('SONARQUBE_IP_ADDRESS')
    //   }
    //   steps {
    //     echo "Sonar IP Address --> $SONAR_URL"
    //     withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
    //       sh '''
    //         cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
    //         mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}
    //       '''
    //     }
    //   }
    // }

    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "jmsajib11/full-ci-cd:${BUILD_NUMBER}"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
            sh '''
              set -e
              cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
              docker build -t ${DOCKER_IMAGE} .
            '''
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                dockerImage.push()
            }
        }
      }
    }

    stage('Update Deployment File') {
      environment {
        GIT_REPO_NAME = "argo-cd-repo"
        GIT_USER_NAME = "JMSajib"
        GIT_USER_EMAIL = "jm.sajib012@gmail.com"
      }
      steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          // change this sc script
          sh '''
                set -e
                # Clone the repository
                git clone https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git
                
                # Navigate to the repository directory
                cd ${GIT_REPO_NAME}

                # Optional: Ensure latest changes
                git pull origin main

                # Configure git user
                git config user.email "${GIT_USER_EMAIL}"
                git config user.name "${GIT_USER_NAME}"

                # Update the deployment file
                sed -i "s|image: jmsajib11/full-ci-cd:[0-9]\\+|image: jmsajib11/full-ci-cd:${BUILD_NUMBER}|g" deployment.yml

                # Add and commit changes
                git add deployment.yml
                git commit -m "Update deployment image to version ${BUILD_NUMBER} [Jenkins build ${BUILD_NUMBER}]"

                # Push changes back to the repository
                git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git HEAD:main
            '''
        }
      }
    }
  }
}
